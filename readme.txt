
  使用python自主设计实现分布式系统。

实现功能：
1. 在实现文件基本操作的基础上增加更多的文件操作，实现一共10种文件操作，增加文件夹创建、删除、列举所有文件、切换文件目录、重命名、可视化打开文件读取和修改操作等功能。
   ls：列举当前文件夹中的所有文件
   cd route：进入下一级route目录
   mkdir fold_name：创建文件夹
   rmdir fold_name：删除文件夹
   rename old_name new_name：文件夹或文件重命名
   mknod file_name：创建文件
   remove file_name：删除文件
   read file_name：读文件内容
   write file_name content：写文件内容
   open file_name：以可视化形式打开文件，并且可以直接读取和删改
   
2. 引入两种处理文件方式，一是直接命名行操作，而是可视化操作，可以显示打开文件，方便阅读信息或者直接修改信息。

3. 文件系统命令格式，贴近cmd格式，符合文件系统特点。

4. 加入cd模式，并且考虑当前文件夹位置切换，相应的文件创建、访问和删除也进行相应更新，更加符合实际情况，可用性进一步增强。

5. 自主设计服务器拓扑，不固定一个主服务器，根据实际指定主服务器，更加符合现实的分布式系统。

6. 不局限于一对多单一广播结构，服务器与服务器之间相互进行多播，因此服务器之间的连接方式更加灵活，符合P2P的特点。

7. 增加多种文件操作异常处理，容错性好，保证操作文件时不会出现程序崩溃，合理处理各种不合法操作，增强程序健壮性。

8. 减少单点失效风险，主服务器宕机后，选择次优服务器补上作为主服务器。

9. 服务器支持多线程并发，提高性能，支持多用户同时进行访问。

10. 客户向一个服务器发送rpc请求修改文件数据，服务器使用多线程同时将更新消息多播给其他服务器，其他服务器也采用多线程并发方式进行多播，提高并行效率。

11. 为了保证修改文件数据的读写一致性，使用文件读写锁，在修改文件数据处设立临界区，保证只有一个线程在写，其他线程不能干扰，避免RC问题，读可以多个线程同时进行读取，保证读写一致性。

12. 实现缓存更新，可以加快客户端访问程序的效率。



文件说明：
file_data文件夹   ：存储用户本地缓存数据以及各个服务器的数据
client.py  客户端1
client1.py 客户端2
client2.py 客户端3
server*.py 5个服务器代码

运行说明：
服务器运行次序：按序号1,2,3,4,5  cmd运行
没有固定的主服务器，是根据距离远近大小实际情况选择主服务器，
为了测试方便，自主设定客户端到各个服务器的距离，因此在测试中，
距离最短的是server5的服务器，即为主服务器。

   
